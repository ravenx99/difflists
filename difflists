#!/usr/bin/env perl

# show differences between lists in a format like 'diff -y', but where every
# difference is a new line instead of thinking a line has changed in place.
#
#   Copyright 2016 Carl D Cravens <raven@phoenyx.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#========================================================================

use strict;
use warnings;
use 5.010;
use Getopt::Long;
use List::MoreUtils qw(uniq);

Getopt::Long::Configure('bundling');

my $opt_uniq=0;    # filter out duplicates
my $opt_diff=0; # show only files missing from either list
my $opt_both=0;    # show only files in both lists

GetOptions(
    "diff|d"    => \$opt_diff,
    "unique|u"  => \$opt_uniq,
    "both|b"    => \$opt_both,
    "help|h"    => \&usage_and_exit,
  ) || usage_and_exit("Error in command line arguments\n");

if ( @ARGV < 2 ) {
    usage_and_exit("Need more arguments\n");
}

if ( $opt_diff && $opt_both ) {
    usage_and_exit("'diff' and 'both' are mutually exclusive\n");
}

my $listfile_a = shift(@ARGV);
my $listfile_b = shift(@ARGV);

my ( @list_a, @list_b );

@list_a = readfile( $listfile_a );
@list_b = readfile( $listfile_b );

# find the longest element of the left-hand list to format the display
my $lwidth = longest( @list_a );

my $element_a = '';
my $element_b = '';
while (( @list_a > 0 || $element_a ne '' ) && ( @list_b > 0 || $element_b ne '' )) {
    if ( $element_a eq '' ) { $element_a = shift(@list_a) }
    if ( $element_b eq '' ) { $element_b = shift(@list_b) }
    if ( $element_a lt $element_b ) {
        if ( !$opt_both ) {
            print_left( $element_a );
        }
        $element_a = '';
    } elsif ( $element_b lt $element_a ) {
        if ( !$opt_both ) {
            print_right( $element_b );
        }
        $element_b = '';
    } else {
        if ( !$opt_diff ) {
            print_both( $element_a, $element_b );
        }
        $element_a = $element_b = '';
    }
}

while ( @list_a > 0 ) {
    my $element = shift( @list_a );
    if ( !$opt_both ) {
        print_left( $element );
    }
}

while ( @list_b > 0 ) {
    my $element = shift( @list_b );
    if ( !$opt_both ) {
        print_right( $element );
    }
}

exit;

# read the list into a sorted array
sub readfile {
    my @list;
    my $file = shift(@_);
    open( my $fh, '<', $file ) || die( "Can't open $file: $!\n" );
    chomp( @list = sort <$fh> );
    if ( $opt_uniq > 0 ) {
        return uniq( @list );
    } else {
        return @list;
    }
};

sub print_left {
    printf( "%-${lwidth}s  <\n", $_[0] );
};

sub print_right {
    printf( "%-${lwidth}s  >  %s\n", '', $_[0] );
};

sub print_both {
    my $l = shift(@_);
    my $r = shift(@_);
    if ( $opt_both ) {
        print( "$l\n" );
    } else {
        printf( "%-${lwidth}s     %s\n", $l, $r );
    }
};

# find the longest element in an array
sub longest {
    my $longest=0;
    my $len;
    for my $n (@_) {
        $len = length($n);
        if ( $len > $longest ) {
            $longest = $len;
        }
    }
    return $longest;
};

sub usage_and_exit {
    my $msg = shift(@_);
    if ( $msg eq 'help' ) { $msg = '' };
    my $program = (split('/',$0))[-1];
    print( "${msg}usage: $program [--unique] [--both|--diff] <file_a> <file_b>\n" );
    exit 1;
};
